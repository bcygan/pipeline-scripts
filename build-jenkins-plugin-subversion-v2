def String sourceURL = "https://github.com/jenkinsci/subversion-plugin"

def String jenkinsTestHost = "localhost:8080/"
def String jenkinsProductionHost = "localhost:8081/"
def String stashName = "plugin"
def String sourceStashName = stashName+"-sources"

stage name:"Build"; //, concurrency: 1 // cheap way to ensure that double-click does not result in two builds
node {
    echo "++++++++++ Build - getting source code from ${sourceURL}"
    
    git url:sourceURL
    stash name: sourceStashName, excludes: "target/*" 
    
    echo "++++++++++ Build - running maven +++++"
    runMaven("-DskipTests=true clean install") // we will come back to the tests later on 
    
    runSonatypeCLM('Build')
    
    echo "++++++++++ Build - stashing plugin file +++++"
    // recursively stash all .hpi files under target/, namely archiving /*/target/*.hpi
    sh "find . -path '*/target/*.hpi' |grep -v 'test-classes' >target/plugins.list"
    sh "tar -czvf target/${stashName}.tgz --files-from ./target/plugins.list"
    stash name: stashName, includes: "target/${stashName}.tgz" 
    
}
guardedCheckpoint "binary is built"

stage name:"Tests and Metrics" , concurrency: 1 // cheap way to ensure that double-click does not result in two builds
parallel "Integration Tests": {
    node {
        echo "++++++++++ Integration Tests ++++++++++"

        unstash stashName+"-sources" // we need to get the source again just in case we are running on a different node
        //runMaven("verify")
        echo "Integration Tests: finished"
    }
},
"Sonar": {
    runSonar(stashName+"-sources")
}
guardedCheckpoint "tests and metrics are done"

// check that the clients still can work with the host
// here we limit concurrency to 2 because we just have 2 slave nodes
stage name: "Load Tests", concurrency: 2 
parallel "Load Test #1" : {
    node {
        executeLoadTest(jenkinsTestHost)
    }
},
"Load Test #2": {
    node {
        executeLoadTest(jenkinsTestHost)
    }
},
"Load Test #3": {
    node {
        executeLoadTest(jenkinsTestHost)
    }
}
//checkpoint "all tests are done"    

stage name:"Pre-Release Tests"
    node {
        runSonatypeCLM('Stage Release')            
    }

stage name:"Deploy to Production"
node {
    //input "All tests are ok. Shall we continue to deploy into production (This will initiate a Jenkins restart) ?"
    uploadPluginAndRestartJenkins ( jenkinsProductionHost, "plugin" )
}

def executeLoadTest ( String jenkinsHost ) {
    echo "++++++++++ executing load test against Jenkins host ${jenkinsHost} ++++++++++"
    
    // do here whatever you like, e.g. Selenium, calling the REST API with curl, ...
}

def uploadPluginAndRestartJenkins ( String jenkinsHost, String stashName ) {
    echo "++++++++++ uploading plugin to ${jenkinsHost} ++++++++++"
    unstash stashName
    // now we have all plugins in plugins.tgz
    // execute whatever mechanism you have for deployment of plugins
    // e.g. 
    // scp *.hpi jenkins@jenkins.local:/var/lib/jenkins/plugins
    // java -jar <some-path>/jenkins-cli.jar -s ${jenkinsHost} safe-restart;
    //
}

def runMaven ( String parameters ) {
    echo "++++++++++ executing Maven with ${parameters} ++++++++++"
    def mvnHome = tool 'M3'
    sh "${mvnHome}/bin/mvn -B "+parameters
}

def guardedCheckpoint ( String message ) {
    try {
        checkpoint message
    } catch (NoSuchMethodError e) {
        echo "ERROR ("+message+"): checkpoints are a CJP feature"
    }    
}

def runSonatypeCLM (String stageIdParm) {
    echo "++++++++++ Sonatype CLM stage ${stageIdParm} ++++++++++"
    // TODO 
    // unstash either binary or -sources
    // let Sonatype scan, fetch the result
    // show that scan result can be embedded in Jenkins as well as in Sonar
    //step $class: 'hudson.tasks.junit.JUnitResultArchiver', testResults: 'target/surefire-reports/*.xml'
        
    // infos from decomposition of plugin
    //step $class: 'com.sonatype.insight.ci.hudson.PostBuildScan', applicationSelectType
    // ApplicationSelectType: constructor=value,manualAppId,listAppId

    //constructor=username,password,applicationSelectTypePost,listAppId,manualAppId,scanTargets,moduleExcludes,scanProperties,failOnClmServerFailures,stageId
    //step $class: 'com.sonatype.insight.ci.hudson.PostBuildScan', username: 'jenkins', password: 'jenkins', applicationTypePost: 'listAppId', listAppId:'Jenkins', stageId:stageIdParm
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '452cfc80-f164-43d9-93e7-4dd1360dca47', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME']]) {
        def secret = hudson.util.Secret.fromString(env.PASSWORD);
//        step $class: 'com.sonatype.insight.ci.hudson.PostBuildScan', username: '${env.USERNAME}', password: secret, applicationTypePost: 'listAppId', listAppId:'Jenkins', stageId:stageIdParm
//        step $class: 'com.sonatype.insight.ci.hudson.PostBuildScan', username: '${env.USERNAME}', password: secret
//        step $class: 'com.sonatype.insight.ci.hudson.PostBuildScan', username: '${env.USERNAME}', password: secret, applicationSelectTypePost: 0, listAppId: 0, stageId: stageIdParm

// documented interface from Sonatype
//public PostBuildScan(final String username,
//                       final Secret password,
//                       final ApplicationSelectType applicationSelectTypePost,
//                       final String listAppId,
//                       final String manualAppId,
//                       final String scanTargets,
//                       final String moduleExcludes,
//                       final String scanProperties,
//                       final boolean failOnClmServerFailures,
//                       final String stageId)
        def typePost = new com.sonatype.insight.ci.hudson.ApplicationSelectType('Jenkins',null,null);
        
        step $class: 'com.sonatype.insight.ci.hudson.PostBuildScan', username: '${env.USERNAME}', password: secret, 
            applicationSelectTypePost: typePost,
            listAppId: 'Jenkins',
            failOnClmServerFailures: true,
            stageId: stageIdParm
    }
    
    echo "Sonatype: finished"
}

def runSonar ( String sourceStashName ) {
    node {
        echo "++++++++++ Quality Metrics ++++++++++"
            
        unstash sourceStashName  // we need to get the source again just in case we are running on a different node
        runMaven("sonar:sonar")
        echo "Sonar: finished"
    }

}
